name: Deploy AWS Network Security Scanner

on:
  push:
    branches: [main]
  
  workflow_dispatch:

env:
  AWS_REGION: eu-west-2
  LAMBDA_NAME: network-security-deployment
  LAMBDA_RUNTIME: python3.12
  LAMBDA_TIMEOUT: 900  # 15 minutes for multi-region scanning
  LAMBDA_MEMORY: 512   # MB - increased for multi-region processing
  FUNCTION_NAME: network-security-scanner

jobs:
  deploy-network-scanner:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    permissions:
      id-token: write
      contents: read
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_OIDC }}
          role-session-name: NetworkScannerDeploymentSession
          aws-region: ${{ env.AWS_REGION }}

      - name: Create Network Scanner Deployment Package
        id: create_package
        run: |
          echo "🔧 Creating Network Security Scanner deployment package..."

          # Set package name
          PACKAGE_NAME="network-security-scanner.zip"
          
          # Create deployment directory
          mkdir -p network-scanner-package
          
          # Create requirements.txt for PDF generation
          cat > requirements.txt << 'DEPS'
          reportlab==4.0.4
          DEPS
          
          # Install dependencies
          pip install -r requirements.txt -t network-scanner-package/
          
          # Create the Network Security Scanner Python script
          cat > network-scanner-package/lambda_function.py << 'EOF'
          import json, boto3, os
          from datetime import datetime, timezone
          import re

          # Environment variables
          SNS_TOPIC_ARN = os.environ["SNS_TOPIC_ARN"]
          REPORTS_BUCKET = os.environ.get("REPORTS_BUCKET", "network-security-reports")
          ENVIRONMENT_FILTER = os.environ.get("ENVIRONMENT_FILTER", "")

          # AWS clients
          sns = boto3.client("sns")

          def get_port_risk(port):
              """Simplified port risk assessment."""
              critical_ports = {22, 3389, 1433, 3306, 5432, 6379, 27017}  # SSH, RDP, Databases
              high_risk_ports = {21, 23, 25, 53, 135, 139, 445, 8080, 8443}  # Legacy/Admin services
              
              if port in critical_ports:
                  return "CRITICAL"
              elif port in high_risk_ports or port < 1024:
                  return "HIGH"
              elif port in {80, 443}:
                  return "MEDIUM"
              else:
                  return "LOW"

          def has_internet_exposure(security_group):
              """Check if security group has internet exposure."""
              for rule in security_group.get('IpPermissions', []):
                  for ip_range in rule.get('IpRanges', []):
                      if ip_range.get('CidrIp') == '0.0.0.0/0':
                          return True
              return False

          def get_critical_exposures(security_group):
              """Find critical port exposures to internet."""
              critical_exposures = []
              
              for rule in security_group.get('IpPermissions', []):
                  from_port = rule.get('FromPort')
                  to_port = rule.get('ToPort')
                  
                  if from_port and to_port:
                      ports = [from_port] if from_port == to_port else list(range(from_port, to_port + 1))
                  else:
                      ports = ['All']
                  
                  for ip_range in rule.get('IpRanges', []):
                      if ip_range.get('CidrIp') == '0.0.0.0/0':
                          for port in ports:
                              if port != 'All' and get_port_risk(port) == 'CRITICAL':
                                  critical_exposures.append({
                                      'port': port,
                                      'sg_id': security_group['GroupId'],
                                      'sg_name': security_group.get('GroupName', 'N/A')
                                  })
              
              return critical_exposures

          def scan_region(region):
              """Scan security groups in a single region."""
              try:
                  print(f"Scanning {region}")
                  ec2 = boto3.client('ec2', region_name=region)
                  
                  # Apply environment filter if specified
                  filters = []
                  if ENVIRONMENT_FILTER:
                      filters.append({'Name': 'tag:Environment', 'Values': [ENVIRONMENT_FILTER]})
                  
                  response = ec2.describe_security_groups(Filters=filters)
                  security_groups = response['SecurityGroups']
                  
                  # Analyze security groups
                  internet_exposed = 0
                  critical_exposures = []
                  
                  for sg in security_groups:
                      if has_internet_exposure(sg):
                          internet_exposed += 1
                      
                      critical_exposures.extend(get_critical_exposures(sg))
                  
                  return {
                      'region': region,
                      'total_groups': len(security_groups),
                      'internet_exposed': internet_exposed,
                      'critical_exposures': critical_exposures,
                      'status': 'success'
                  }
                  
              except Exception as e:
                  print(f"Error scanning {region}: {str(e)}")
                  return {
                      'region': region,
                      'total_groups': 0,
                      'internet_exposed': 0,
                      'critical_exposures': [],
                      'status': 'error',
                      'error': str(e)
                  }

          def get_aws_regions():
              """Get all AWS regions."""
              try:
                  ec2 = boto3.client('ec2', region_name='us-east-1')
                  response = ec2.describe_regions()
                  return [region['RegionName'] for region in response['Regions']]
              except:
                  # Fallback to common regions
                  return ['us-east-1', 'us-west-2', 'eu-west-1', 'eu-west-2', 'ap-southeast-1']

          def generate_simple_report(scan_results, scan_id):
              """Generate simple but effective HTML report."""
              
              # Calculate totals
              total_groups = sum(r.get('total_groups', 0) for r in scan_results.values())
              total_internet_exposed = sum(r.get('internet_exposed', 0) for r in scan_results.values())
              all_critical_exposures = []
              
              for region_data in scan_results.values():
                  all_critical_exposures.extend(region_data.get('critical_exposures', []))
              
              # Determine risk level
              if len(all_critical_exposures) > 0:
                  risk_level = " CRITICAL RISK"
                  risk_action = "Immediate action required"
              elif total_internet_exposed > 5:
                  risk_level = " HIGH RISK"
                  risk_action = "Review and secure within 30 days"
              else:
                  risk_level = " LOW RISK"
                  risk_action = "Continue monitoring"
              
              # Generate critical findings
              critical_findings_html = ""
              for i, exposure in enumerate(all_critical_exposures[:5], 1):  # Show top 5
                  critical_findings_html += f"""
                  <li><strong>Exposure #{i}:</strong> Port {exposure['port']} in Security Group 
                  {exposure['sg_name']} ({exposure['sg_id']}) - CRITICAL service exposed to internet</li>
                  """
              
              if not critical_findings_html:
                  critical_findings_html = "<li>✅ No critical exposures found</li>"
              
              # Simple HTML template
              html_content = f"""
              <!DOCTYPE html>
              <html>
              <head>
                  <title>Network Security Assessment</title>
                  <style>
                      body {{ font-family: Arial, sans-serif; margin: 40px; line-height: 1.6; }}
                      .header {{ background: #f4f4f4; padding: 20px; border-radius: 5px; }}
                      .metric {{ display: inline-block; margin: 10px; padding: 15px; background: #e9e9e9; border-radius: 5px; }}
                      .critical {{ color: #d32f2f; font-weight: bold; }}
                      .risk-box {{ background: #fff3cd; padding: 15px; border-left: 5px solid #ffc107; margin: 20px 0; }}
                  </style>
              </head>
              <body>
                  <div class="header">
                      <h1> Network Security Assessment Report</h1>
                      <p><strong>Scan ID:</strong> {scan_id}</p>
                      <p><strong>Date:</strong> {datetime.now(timezone.utc).strftime('%Y-%m-%d %H:%M UTC')}</p>
                      <p><strong>Regions Scanned:</strong> {len(scan_results)}</p>
                  </div>
                  
                  <div class="risk-box">
                      <h2>{risk_level}</h2>
                      <p><strong>Action Required:</strong> {risk_action}</p>
                  </div>
                  
                  <h2> Security Metrics</h2>
                  <div class="metric">
                      <h3>{total_groups}</h3>
                      <p>Total Security Groups</p>
                  </div>
                  <div class="metric">
                      <h3 class="critical">{len(all_critical_exposures)}</h3>
                      <p>Critical Exposures</p>
                  </div>
                  <div class="metric">
                      <h3>{total_internet_exposed}</h3>
                      <p>Internet Exposed</p>
                  </div>
                  
                  <h2> Critical Security Findings</h2>
                  <ul>
                      {critical_findings_html}
                  </ul>
                  
                  <h2> Regional Summary</h2>
                  <ul>
              """
              
              # Add regional breakdown
              for region, data in scan_results.items():
                  if data.get('status') == 'success':
                      html_content += f"<li><strong>{region}:</strong> {data['total_groups']} groups, {data['internet_exposed']} internet-exposed</li>"
                  else:
                      html_content += f"<li><strong>{region}:</strong> Error - {data.get('error', 'Unknown error')}</li>"
              
              html_content += """
                  </ul>
                  
                  <hr>
                  <p><small>Report generated by AWS Network Security Scanner | Contact IT Security for details</small></p>
              </body>
              </html>
              """
              
              return html_content

          def simple_pdf_conversion(html_content, scan_name):
              """Simple HTML to PDF conversion."""
              try:
                  from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer
                  from reportlab.lib.styles import getSampleStyleSheet
                  import io
                  
                  buffer = io.BytesIO()
                  doc = SimpleDocTemplate(buffer)
                  styles = getSampleStyleSheet()
                  story = []
                  
                  # Extract key information
                  story.append(Paragraph("Network Security Assessment Report", styles['Title']))
                  story.append(Spacer(1, 20))
                  
                  # Convert HTML to simple text (basic approach)
                  text_content = re.sub('<[^<]+?>', ' ', html_content)
                  text_content = re.sub('\s+', ' ', text_content).strip()
                  
                  # Split into paragraphs
                  paragraphs = text_content.split('\n')
                  for para in paragraphs:
                      if para.strip():
                          story.append(Paragraph(para.strip(), styles['Normal']))
                          story.append(Spacer(1, 12))
                  
                  doc.build(story)
                  pdf_data = buffer.getvalue()
                  buffer.close()
                  
                  print(f"Generated simplified PDF: {len(pdf_data)} bytes")
                  return pdf_data
                  
              except Exception as e:
                  print(f"PDF generation failed: {str(e)}")
                  raise

          def upload_report_and_notify(pdf_data, html_content, scan_id, scan_results):
              """Upload report and send notification."""
              try:
                  s3_client = boto3.client('s3')
                  
                  # Upload to S3
                  year_month = datetime.now(timezone.utc).strftime('%Y-%m')
                  s3_key = f"network-security-reports/{ENVIRONMENT_FILTER if ENVIRONMENT_FILTER else 'all'}/{year_month}/network-security-assessment.pdf"
                  
                  s3_client.put_object(
                      Bucket=REPORTS_BUCKET,
                      Key=s3_key,
                      Body=pdf_data,
                      ContentType='application/pdf'
                  )
                  
                  pdf_url = s3_client.generate_presigned_url('get_object', 
                      Params={'Bucket': REPORTS_BUCKET, 'Key': s3_key}, ExpiresIn=86400)
                  
                  print(f"Report uploaded to S3: s3://{REPORTS_BUCKET}/{s3_key}")
                  
              except Exception as e:
                  print(f"S3 upload failed: {str(e)}")
                  pdf_url = None
              
              # Send SNS notification
              try:
                  total_groups = sum(r.get('total_groups', 0) for r in scan_results.values())
                  total_critical = sum(len(r.get('critical_exposures', [])) for r in scan_results.values())
                  
                  message = f"""AWS Network Security Assessment Completed

          Scan ID: {scan_id}
          Regions Scanned: {len(scan_results)}
          Total Security Groups: {total_groups}
          Critical Exposures: {total_critical}

          Report: {pdf_url if pdf_url else 'Upload failed'}

          Contact IT Security for details."""
                  
                  sns.publish(
                      TopicArn=SNS_TOPIC_ARN,
                      Subject=f"Network Security Assessment - {scan_id}",
                      Message=message
                  )
                  
                  print("Notification sent successfully")
                  
              except Exception as e:
                  print(f"SNS notification failed: {str(e)}")

          def lambda_handler(event, context):
              """Simplified Lambda handler."""
              print("Starting AWS Network Security Assessment...")
              
              try:
                  # Get regions and scan
                  regions = get_aws_regions()
                  print(f"Scanning {len(regions)} AWS regions")
                  
                  scan_results = {}
                  for region in regions:
                      scan_results[region] = scan_region(region)
                  
                  print(f"Multi-region scan completed")
                  
                  # Generate report
                  scan_id = f"network-security-{datetime.now(timezone.utc).strftime('%Y%m%d%H%M%S')}"
                  
                  html_content = generate_simple_report(scan_results, scan_id)
                  pdf_data = simple_pdf_conversion(html_content, scan_id)
                  
                  # Upload and notify
                  upload_report_and_notify(pdf_data, html_content, scan_id, scan_results)
                  
                  # Summary
                  total_groups = sum(r.get('total_groups', 0) for r in scan_results.values())
                  total_critical = sum(len(r.get('critical_exposures', [])) for r in scan_results.values())
                  
                  print(f"Assessment completed: {total_groups} groups, {total_critical} critical exposures")
                  
                  return {
                      "statusCode": 200,
                      "body": {
                          "message": f"Network security assessment completed: {scan_id}",
                          "total_groups": total_groups,
                          "critical_exposures": total_critical
                      }
                  }
                  
              except Exception as e:
                  print(f"Assessment failed: {str(e)}")
                  return {"statusCode": 500, "body": f"Assessment failed: {str(e)}"}
          EOF

          # Create ZIP package
          cd network-scanner-package
          zip -r ../$PACKAGE_NAME .
          cd ..
          
          echo "📦 Network scanner package created: $PACKAGE_NAME"
          echo "package_name=$PACKAGE_NAME" >> $GITHUB_OUTPUT

      - name: Deploy Network Security Scanner Lambda
        run: |
          FUNCTION_NAME="network-security-scanner"
          PACKAGE_NAME="${{ steps.create_package.outputs.package_name }}"
          
          echo "🚀 Deploying Network Security Scanner Lambda function..."
          
          if aws lambda get-function --function-name $FUNCTION_NAME 2>/dev/null; then
            echo "🔄 Updating existing function..."
            
            aws lambda update-function-code \
              --function-name $FUNCTION_NAME \
              --zip-file fileb://$PACKAGE_NAME

            # Wait for code update to complete
            echo "⏳ Waiting for code update to complete..."
            aws lambda wait function-updated --function-name $FUNCTION_NAME  
            
            aws lambda update-function-configuration \
              --function-name $FUNCTION_NAME \
              --runtime ${{ env.LAMBDA_RUNTIME }} \
              --timeout ${{ env.LAMBDA_TIMEOUT }} \
              --memory-size ${{ env.LAMBDA_MEMORY }} \
              --environment Variables="{SNS_TOPIC_ARN=${{ secrets.SNS_TOPIC_ARN }},SCAN_TYPE=NETWORK_SECURITY_GROUPS,ENVIRONMENT_FILTER=staging,REPORTS_BUCKET=${{ secrets.REPORTS_BUCKET }}}"
            
            echo "✅ Function updated"
          else
            echo "🆕 Creating new function..."
            
            aws lambda create-function \
              --function-name $FUNCTION_NAME \
              --runtime ${{ env.LAMBDA_RUNTIME }} \
              --role ${{ secrets.LAMBDA_EXECUTION_ROLE_ARN }} \
              --handler lambda_function.lambda_handler \
              --zip-file fileb://$PACKAGE_NAME \
              --timeout ${{ env.LAMBDA_TIMEOUT }} \
              --memory-size ${{ env.LAMBDA_MEMORY }} \
              --environment Variables="{SNS_TOPIC_ARN=${{ secrets.SNS_TOPIC_ARN }},SCAN_TYPE=NETWORK_SECURITY_GROUPS,ENVIRONMENT_FILTER=staging,REPORTS_BUCKET=${{ secrets.REPORTS_BUCKET }}}" \
              --description "AWS Network Security Scanner - staging"
            
            echo "✅ Function created"
          fi

      - name: Create EventBridge Schedule (Quarterly - Network Security)
        id: create_network_schedule
        run: |
          SCHEDULE_NAME="network-security-scan-quarterly"
          FUNCTION_NAME="network-security-scanner"
          
          echo "📅 Setting up quarterly EventBridge schedule for network security..."
          
          # Check if rule already exists
          if aws events describe-rule --name $SCHEDULE_NAME 2>/dev/null; then
            echo "✅ Quarterly network security schedule already exists: $SCHEDULE_NAME"
          else
            echo "🆕 Creating quarterly network security schedule (auto-enabled)..."
            
            # Get Lambda function ARN
            LAMBDA_ARN=$(aws lambda get-function --function-name $FUNCTION_NAME --query 'Configuration.FunctionArn' --output text)
            
            # Create schedule (quarterly: January, April, July, October at 3 AM UTC - offset from main inspector)
            aws events put-rule \
              --name $SCHEDULE_NAME \
              --schedule-expression "cron(0 3 1 1,4,7,10 ? *)" \
              --description "Quarterly AWS Network Security scan - staging (AUTO)" \
              --state ENABLED
            
            # Add Lambda target
            aws events put-targets \
              --rule $SCHEDULE_NAME \
              --targets "Id"="1","Arn"="$LAMBDA_ARN"
            
            # Add Lambda permission for EventBridge
            aws lambda add-permission \
              --function-name $FUNCTION_NAME \
              --statement-id allow-eventbridge-network-quarterly \
              --action lambda:InvokeFunction \
              --principal events.amazonaws.com \
              --source-arn "arn:aws:events:${{ env.AWS_REGION }}:$(aws sts get-caller-identity --query Account --output text):rule/$SCHEDULE_NAME" \
              2>/dev/null || echo "Permission already exists"
            
            echo "✅ Quarterly network security schedule created (ENABLED): $SCHEDULE_NAME"
          fi
          
          echo "schedule_name=$SCHEDULE_NAME" >> $GITHUB_OUTPUT

      - name: Test Network Security Scanner
        run: |
          echo "🧪 Testing Network Security Scanner function..."
          
          aws lambda invoke \
            --function-name network-security-scanner \
            --payload '{}' \
            network-response.json
          
          echo "✅ Test invocation sent (async)"
          echo "📊 Check CloudWatch logs: aws logs tail /aws/lambda/network-security-scanner --follow"

      - name: Upload Network Scanner Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.LAMBDA_NAME }}
          path: |
            ${{ steps.create_package.outputs.package_name }}
          retention-days: 30

      - name: Network Security Deployment Summary
        run: |
          echo "🎉 Network Security Scanner deployment completed successfully!"
          echo ""
          echo "🔐 Network Security Scanner Summary:"
          echo "Function Name: ${{ env.FUNCTION_NAME }}"
          echo "Environment: ${{ env.LAMBDA_NAME }}"
          echo "Runtime: ${{ env.LAMBDA_RUNTIME }}"
          echo "Memory: ${{ env.LAMBDA_MEMORY }}MB"
          echo "Timeout: ${{ env.LAMBDA_TIMEOUT }}s (15 minutes for multi-region scanning)"
          echo "Quarterly Schedule: ${{ steps.create_network_schedule.outputs.schedule_name }}"
          echo ""
          echo "🌍 Scanning Capabilities:"
          echo "• Multi-region security group analysis"
          echo "• Internet exposure detection (0.0.0.0/0)"
          echo "• Port-to-service mapping"
          echo "• Risk categorization (Critical/High/Medium/Low)"
          echo "• Unused security group identification"
          echo "• Comprehensive PDF reporting"
          echo ""
          echo "⏰ Schedule Details:"
          echo "• Frequency: Quarterly (Jan 1, Apr 1, Jul 1, Oct 1)"
          echo "• Time: 3:00 AM UTC (1 hour after main inspector scan)"
          echo "• Trigger: EventBridge rule (auto-enabled)"
          echo ""
          echo "🔗 Next Steps:"
          echo "1. Verify SNS topic ARN is correct"
          echo "2. Test function manually: aws lambda invoke --function-name ${{ env.FUNCTION_NAME }}"
          echo "3. Check CloudWatch logs for execution results"
          echo "4. Review S3 bucket for network security reports"
          echo "5. Ensure Lambda execution role has EC2 read permissions for all regions"
          echo ""
          echo "📊 CloudWatch Logs: /aws/lambda/${{ env.FUNCTION_NAME }}"
          echo "📁 Reports Location: s3://${{ secrets.REPORTS_BUCKET }}/network-security-reports/"

      - name: Cleanup Network Scanner
        if: always()
        run: |
          echo "🧹 Cleaning up temporary files..."
          rm -f ${{ steps.create_package.outputs.package_name }}
          rm -f network-response.json
          rm -rf network-scanner-package/