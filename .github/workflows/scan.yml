name: Deploy AWS Inspector Lambda Function.

on:
  push:
    branches: [main]
  
  workflow_dispatch:

env:
  AWS_REGION: eu-west-2
  LAMBDA_NAME: lambda-deployment
  LAMBDA_RUNTIME: python3.12
  LAMBDA_TIMEOUT: 300  # 5 minutes
  LAMBDA_MEMORY: 256   # MB
  FUNCTION_NAME: inspector-ec2-scanner

jobs:
  deploy-lambda:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    permissions:
      id-token: write
      contents: read
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_OIDC }}
          role-session-name: LambdaDeploymentSession
          aws-region: ${{ env.AWS_REGION }}

      - name: Create Lambda Deployment Package
        id: create_package
        run: |
          echo " Creating Lambda deployment package..."

          # Set package name
          PACKAGE_NAME="lambda-deployment.zip"
          
          # Create deployment directory
          mkdir -p lambda-package
          
          # Create the Python script inline
          cat > lambda-package/lambda_function.py << 'EOF'
          import json, boto3, os, base64
          from datetime import datetime, timezone

          SNS_TOPIC_ARN = os.environ["SNS_TOPIC_ARN"]
          SCAN_TYPE = os.environ.get("SCAN_TYPE", "PACKAGE_VULNERABILITY")
          ENVIRONMENT_FILTER = os.environ.get("ENVIRONMENT_FILTER", "")
          REPORTS_BUCKET = os.environ.get("REPORTS_BUCKET", "inspector-reports-bucket")

          sns = boto3.client("sns")
          ec2 = boto3.client("ec2")
          inspector2 = boto3.client("inspector2")

          def _get_instances_with_names():
              """Get EC2 instances and their names in one call."""
              filters = [{"Name": "instance-state-name", "Values": ["running"]}]
              if ENVIRONMENT_FILTER:
                  filters.append({"Name": "tag:Environment", "Values": [ENVIRONMENT_FILTER]})
              
              resp = ec2.describe_instances(Filters=filters)
              instances, name_map = [], {}
              
              for reservation in resp.get("Reservations", []):
                  for instance in reservation.get("Instances", []):
                      iid = instance["InstanceId"]
                      instances.append(iid)
                      tags = instance.get("Tags", [])
                      name_map[iid] = next((t["Value"] for t in tags if t["Key"] == "Name"), "Unnamed Instance")
              
              print(f"Found {len(instances)} running instances")
              return instances, name_map

          def _get_filtered_findings(instance_ids):
              """Retrieve and filter SBOM findings in one operation."""
              try:
                  findings_response = inspector2.list_findings(
                      filterCriteria={'resourceId': [{'comparison': 'EQUALS', 'value': iid} for iid in instance_ids]},
                      maxResults=50
                  )
                  findings = findings_response.get('findings', [])
                  print(f"Retrieved {len(findings)} findings for SBOM report")
              except Exception as e:
                  print(f"Error retrieving Inspector data: {str(e)}")
                  findings = []
              
              # Filter and prioritize in one step
              by_severity = {
                  'CRITICAL': [f for f in findings if f.get('severity') == 'CRITICAL'],
                  'HIGH': [f for f in findings if f.get('severity') == 'HIGH'],
                  'MEDIUM': [f for f in findings if f.get('severity') == 'MEDIUM'],
                  'LOW': [f for f in findings if f.get('severity') == 'LOW']
              }
              
              # Combine priority findings (max 8 total: 4 critical + 3 high + 1 medium)
              priority_findings = by_severity['CRITICAL'][:4] + by_severity['HIGH'][:3] + by_severity['MEDIUM'][:1]
              
              return {
                  'findings': findings,
                  'priority_findings': priority_findings,
                  'total_critical': len(by_severity['CRITICAL']),
                  'total_high': len(by_severity['HIGH']),
                  'total_medium': len(by_severity['MEDIUM']),
                  'total_low': len(by_severity['LOW']),
                  'total_findings': len(findings),
                  'instance_count': len(instance_ids)
              }

          def _generate_professional_report(scan_id, scan_name, instance_ids, name_map, filtered_data):
              """Generate comprehensive HTML report with executive styling."""
              # Get instance names for summary
              instance_names = [name_map.get(iid, 'Unnamed') for iid in instance_ids[:3]]
              if len(instance_ids) > 3:
                  instance_names.append(f"... and {len(instance_ids)-3} more")
              
              # Risk assessment
              risk_level = "HIGH RISK" if filtered_data['total_critical'] > 0 else \
                          "MEDIUM RISK" if filtered_data['total_high'] > 0 else \
                          "LOW RISK" if filtered_data['total_medium'] > 0 else \
                          "MINIMAL RISK"
              
              # Generate findings HTML
              findings_html = ""
              for i, finding in enumerate(filtered_data['priority_findings'], 1):
                  severity = finding.get('severity', 'UNKNOWN')
                  color = {'CRITICAL': '#dc3545', 'HIGH': '#fd7e14', 'MEDIUM': '#ffc107', 'LOW': '#28a745'}.get(severity, '#6c757d')
                  title = finding.get('title', 'Security Issue')[:50]
                  vuln_id = finding.get('packageVulnerabilityDetails', {}).get('vulnerabilityId', '')
                  resource = finding.get('resources', [{}])[0].get('id', 'Unknown')
                  description = finding.get("description", "No description available")[:120]
                  
                  findings_html += f'''
                  <div style="margin: 10px 0; padding: 15px; border-left: 5px solid {color}; background: #f8f9fa; border-radius: 5px;">
                      <div style="display: flex; justify-content: space-between; align-items: center;">
                          <h4 style="margin: 0; color: #333;">{i}. {title}</h4>
                          <span style="background: {color}; color: white; padding: 4px 8px; border-radius: 3px; font-size: 12px; font-weight: bold;">{severity}</span>
                      </div>
                      <p style="margin: 8px 0 4px 0; color: #666;"><strong>Affected:</strong> {resource}</p>
                      {f'<p style="margin: 4px 0; color: #666;"><strong>CVE:</strong> {vuln_id}</p>' if vuln_id else ''}
                      <p style="margin: 4px 0; color: #555; font-size: 14px;">{description}...</p>
                  </div>'''
              
              # Action recommendation
              action_needed = "Immediate action required" if filtered_data['total_critical'] > 0 else \
                            "Review and plan remediation" if filtered_data['total_high'] > 0 else \
                            "Monitor and address when convenient" if filtered_data['total_medium'] > 0 else \
                            "No immediate action needed"
              
              next_steps = "1. Address critical issues immediately 2. Review high-priority items 3. Schedule medium-priority fixes" if \
                          filtered_data['total_critical'] + filtered_data['total_high'] > 0 else "Continue monitoring. No urgent action required."
              
              # Complete HTML report
              html_content = f'''<!DOCTYPE html>
          <html><head><meta charset="UTF-8"><title>AWS Inspector Report</title>
          <style>
          body {{ font-family: Arial, sans-serif; margin: 20px; line-height: 1.6; color: #333; }}
          .header {{ background: #2a5298; color: white; padding: 20px; border-radius: 8px; text-align: center; margin-bottom: 20px; }}
          .summary-box {{ background: #f8f9fa; padding: 15px; border-radius: 5px; margin: 10px 0; }}
          .metrics {{ display: flex; gap: 10px; margin: 15px 0; }}
          .metric {{ text-align: center; padding: 10px; background: white; border: 2px solid #ddd; border-radius: 5px; flex: 1; }}
          .critical {{ border-color: #dc3545; }} .high {{ border-color: #fd7e14; }} .medium {{ border-color: #ffc107; }}
          </style></head>
          <body>
          <div class="header">
              <h1>AWS Inspector Security Report</h1>
              <p>Executive Summary - Priority Issues Only</p>
          </div>

          <div class="summary-grid">
              <div class="summary-box">
                  <h3 style="margin: 0 0 15px 0; color: #495057;">Scan Details</h3>
                  <table>
                      <tr><td style="background: #f8f9fa; font-weight: 600; width: 140px; padding: 8px 12px; border-bottom: 1px solid #e9ecef;">Scan ID:</td><td style="padding: 8px 12px; border-bottom: 1px solid #e9ecef;">{scan_id}</td></tr>
                      <tr><td style="background: #f8f9fa; font-weight: 600; width: 140px; padding: 8px 12px; border-bottom: 1px solid #e9ecef;">Date:</td><td style="padding: 8px 12px; border-bottom: 1px solid #e9ecef;">{datetime.now(timezone.utc).strftime('%Y-%m-%d %H:%M UTC')}</td></tr>
                      <tr><td style="background: #f8f9fa; font-weight: 600; width: 140px; padding: 8px 12px; border-bottom: 1px solid #e9ecef;">Instances:</td><td style="padding: 8px 12px; border-bottom: 1px solid #e9ecef;">{len(instance_ids)} ({', '.join(instance_names)})</td></tr>
                      <tr><td style="background: #f8f9fa; font-weight: 600; width: 140px; padding: 8px 12px; border-bottom: 1px solid #e9ecef;">Total Issues:</td><td style="padding: 8px 12px; border-bottom: 1px solid #e9ecef;">{filtered_data['total_findings']}</td></tr>
                  </table>
              </div>
              
              <div class="summary-box">
                  <h3 style="margin: 0 0 15px 0; color: #495057;">Risk Assessment</h3>
                  <div style="text-align: center; font-size: 18px; font-weight: bold; margin: 15px 0; padding: 15px; border-radius: 8px; background: #f8f9fa;">{risk_level}</div>
                  <p style="font-size: 14px; text-align: center; margin: 10px 0 0 0; color: #666;">{action_needed}</p>
              </div>
          </div>

          <div class="metrics">
              <div class="metric critical">
                  <h3 style="font-size: 24px; font-weight: bold; margin: 0; color: #dc3545;">{filtered_data['total_critical']}</h3>
                  <p style="font-size: 12px; color: #666; margin: 5px 0 0 0;">Critical</p>
              </div>
              <div class="metric high">
                  <h3 style="font-size: 24px; font-weight: bold; margin: 0; color: #fd7e14;">{filtered_data['total_high']}</h3>
                  <p style="font-size: 12px; color: #666; margin: 5px 0 0 0;">High</p>
              </div>
              <div class="metric medium">
                  <h3 style="font-size: 24px; font-weight: bold; margin: 0; color: #ffc107;">{filtered_data['total_medium']}</h3>
                  <p style="font-size: 12px; color: #666; margin: 5px 0 0 0;">Medium</p>
              </div>
              <div class="metric">
                  <h3 style="font-size: 24px; font-weight: bold; margin: 0; color: #28a745;">{filtered_data['total_low']}</h3>
                  <p style="font-size: 12px; color: #666; margin: 5px 0 0 0;">Low</p>
              </div>
          </div>

          <div style="margin-top: 25px;">
              <h2 style="background: #343a40; color: white; padding: 15px; border-radius: 8px 8px 0 0; margin: 0;">Priority Security Issues (Top {len(filtered_data['priority_findings'])})</h2>
              <div style="border: 1px solid #343a40; border-top: none; border-radius: 0 0 8px 8px; padding: 20px;">
                  {findings_html if findings_html else '<p style="text-align: center; color: #28a745; font-size: 16px;">No critical security issues detected!</p>'}
              </div>
          </div>

          <div style="margin-top: 30px; padding: 20px; background: #f8f9fa; border-radius: 8px; text-align: center; border: 1px solid #e9ecef;">
              <p><strong>Next Steps:</strong> {next_steps}</p>
              <p style="font-size: 12px; color: #666; margin-top: 10px;">
                  Report generated by AWS Inspector V2 | Scan ID: {scan_id} | This report shows only the most critical findings for executive review.
              </p>
          </div>
          </body></html>'''
              
              print(f"Generated HTML report: {len(html_content)} characters")
              return base64.b64encode(html_content.encode('utf-8')).decode('utf-8')

          def _upload_and_notify(pdf_data, scan_name, scan_id, instance_ids, name_map):
              """Upload report and send comprehensive notification."""
              # Upload to S3
              try:
                  s3_client = boto3.client('s3')
                  timestamp = datetime.now(timezone.utc).strftime('%Y/%m/%d')
                  s3_key = f"inspector-reports/{timestamp}/{scan_name}.pdf"
                  
                  s3_client.put_object(
                      Bucket=REPORTS_BUCKET, Key=s3_key, Body=pdf_data, ContentType='application/pdf',
                      Metadata={'scan-name': scan_name, 'generated-at': datetime.now(timezone.utc).isoformat()}
                  )
                  
                  pdf_url = s3_client.generate_presigned_url('get_object', 
                      Params={'Bucket': REPORTS_BUCKET, 'Key': s3_key}, ExpiresIn=86400)
                  print(f"PDF uploaded to S3: s3://{REPORTS_BUCKET}/{s3_key}")
              except Exception as e:
                  print(f"Could not upload PDF to S3: {str(e)}")
                  pdf_url = None
              
              # Send notification
              instance_list = [f"{name_map[iid]}: {iid}" for iid in instance_ids]
              pdf_section = f"\n\nSBOM PDF Report: {pdf_url}" if pdf_url else "\n\nPDF report generation in progress..."
              
              message = f"""AWS Inspector V2 scan completed with SBOM analysis.

          Scan: {scan_name}
          ID: {scan_id}
          Type: {SCAN_TYPE}
          Instances: {len(instance_ids)}

          Scanned Instances:
          {chr(10).join(instance_list)}
          {pdf_section}

          Status available in AWS Console."""
              
              sns.publish(TopicArn=SNS_TOPIC_ARN, Subject=f"Inspector SBOM Report - {scan_name}", Message=message)
              print("Enhanced notification sent with PDF link")
              return pdf_url

          def lambda_handler(event, context):
              """Main Lambda handler with complete SBOM processing."""
              print("▶︎ Received event:", json.dumps(event))
              
              try:
                  # Get instances and names
                  instance_ids, name_map = _get_instances_with_names()
                  if not instance_ids:
                      print("No EC2 instances found")
                      return {"statusCode": 204, "body": "No instances to scan"}
                  
                  # Check Inspector V2 status
                  sts_client = boto3.client('sts')
                  account_id = sts_client.get_caller_identity()['Account']
                  response = inspector2.batch_get_account_status(accountIds=[account_id])
                  account_status = response.get('accounts', [])
                  
                  if not (account_status and account_status[0].get('state', {}).get('status') == 'ENABLED'):
                      print("Inspector V2 not enabled - enabling now...")
                      inspector2.enable(resourceTypes=['EC2'])
                      scan_id = f"enabled-{datetime.now(timezone.utc).strftime('%Y%m%d%H%M%S')}"
                      print(f"Inspector V2 enabled and scanning {len(instance_ids)} instances")
                      return {"statusCode": 200, "body": f"Inspector enabled: {scan_id}"}
                  
                  print(f"Inspector V2 is enabled for account {account_id}")
                  
                  # Get filtered findings and generate report
                  print("Retrieving SBOM and findings data...")
                  filtered_data = _get_filtered_findings(instance_ids)
                  
                  print("Generating clean, filtered PDF report...")
                  scan_id = f"inspector-v2-{datetime.now(timezone.utc).strftime('%Y%m%d%H%M%S')}"
                  scan_name = f"ec2-scan-{datetime.now(timezone.utc).strftime('%Y%m%d-%H%M')}"
                  pdf_data = _generate_professional_report(scan_id, scan_name, instance_ids, name_map, filtered_data)
                  
                  # Upload and notify
                  pdf_url = _upload_and_notify(pdf_data, scan_name, scan_id, instance_ids, name_map)
                  
                  print("Inspector V2 scanning completed with PDF report")
                  print(f"PDF report generated: {len(pdf_data)} bytes")
                  print("Scan initiated successfully")
                  return {"statusCode": 200, "body": f"Scan started: {scan_id}"}
                  
              except Exception as e:
                  print(f"Error: {str(e)}")
                  return {"statusCode": 500, "body": f"Failed: {str(e)}"}
          EOF

          # Create ZIP package
          cd lambda-package
          zip -r ../$PACKAGE_NAME .
          cd ..
          
          echo " Package created: $PACKAGE_NAME"

          echo "package_name=$PACKAGE_NAME" >> $GITHUB_OUTPUT

      - name: Deploy Lambda Function
        run: |
          FUNCTION_NAME="inspector-ec2-scanner"
          PACKAGE_NAME="${{ steps.create_package.outputs.package_name }}"
          
          echo " Deploying Lambda function..."
          
          if aws lambda get-function --function-name $FUNCTION_NAME 2>/dev/null; then
            echo " Updating existing function..."
            
            aws lambda update-function-code \
              --function-name $FUNCTION_NAME \
              --zip-file fileb://$PACKAGE_NAME

            # Wait for code update to complete
            echo " Waiting for code update to complete..."
            aws lambda wait function-updated --function-name $FUNCTION_NAME  
            
            aws lambda update-function-configuration \
              --function-name $FUNCTION_NAME \
              --runtime ${{ env.LAMBDA_RUNTIME }} \
              --timeout ${{ env.LAMBDA_TIMEOUT }} \
              --memory-size ${{ env.LAMBDA_MEMORY }} \
              --environment Variables="{SNS_TOPIC_ARN=${{ secrets.SNS_TOPIC_ARN }},SCAN_TYPE=PACKAGE_VULNERABILITY,ENVIRONMENT_FILTER=staging,REPORTS_BUCKET=${{ secrets.REPORTS_BUCKET }}}"
            
            echo " Function updated"
          else
            echo " Creating new function..."
            
            aws lambda create-function \
              --function-name $FUNCTION_NAME \
              --runtime ${{ env.LAMBDA_RUNTIME }} \
              --role ${{ secrets.LAMBDA_EXECUTION_ROLE_ARN }} \
              --handler lambda_function.lambda_handler \
              --zip-file fileb://$PACKAGE_NAME \
              --timeout ${{ env.LAMBDA_TIMEOUT }} \
              --memory-size ${{ env.LAMBDA_MEMORY }} \
              --environment Variables="{SNS_TOPIC_ARN=${{ secrets.SNS_TOPIC_ARN }},SCAN_TYPE=PACKAGE_VULNERABILITY,ENVIRONMENT_FILTER=staging,REPORTS_BUCKET=${{ secrets.REPORTS_BUCKET }}}" \
              --description "AWS Inspector V2 EC2 Scanner - staging"
            
            echo " Function created"
          fi

      - name: Create EventBridge Schedule (Quarterly - Auto)
        id: create_schedule
        run: |
          SCHEDULE_NAME="inspector-scan-quarterly"
          FUNCTION_NAME="inspector-ec2-scanner"
          
          echo " Setting up quarterly EventBridge schedule..."
          
          # Check if rule already exists
          if aws events describe-rule --name $SCHEDULE_NAME 2>/dev/null; then
            echo " Quarterly schedule already exists: $SCHEDULE_NAME"
          else
            echo " Creating quarterly schedule (auto-enabled)..."
            
            # Get Lambda function ARN
            LAMBDA_ARN=$(aws lambda get-function --function-name $FUNCTION_NAME --query 'Configuration.FunctionArn' --output text)
            
            # Create schedule (quarterly: January, April, July, October at 2 AM UTC)
            aws events put-rule \
              --name $SCHEDULE_NAME \
              --schedule-expression "cron(0 2 1 1,4,7,10 ? *)" \
              --description "Quarterly AWS Inspector EC2 scan - staging (AUTO)" \
              --state ENABLED
            
            # Add Lambda target
            aws events put-targets \
              --rule $SCHEDULE_NAME \
              --targets "Id"="1","Arn"="$LAMBDA_ARN"
            
            # Add Lambda permission for EventBridge
            aws lambda add-permission \
              --function-name $FUNCTION_NAME \
              --statement-id allow-eventbridge-quarterly \
              --action lambda:InvokeFunction \
              --principal events.amazonaws.com \
              --source-arn "arn:aws:events:${{ env.AWS_REGION }}:$(aws sts get-caller-identity --query Account --output text):rule/$SCHEDULE_NAME" \
              2>/dev/null || echo "Permission already exists"
            
            echo " Quarterly schedule created (ENABLED): $SCHEDULE_NAME"
          fi
          
          echo "schedule_name=$SCHEDULE_NAME" >> $GITHUB_OUTPUT

      - name: Test Lambda Function
        run: |
          echo " Testing Lambda function..."
          
          aws lambda invoke \
            --function-name inspector-ec2-scanner \
            --payload '{}' \
            response.json
          
          echo " Test invocation sent (async)"
          echo " Check CloudWatch logs: aws logs tail /aws/lambda/inspector-ec2-scanner --follow"

      - name: Upload Deployment Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.LAMBDA_NAME }}
          path: |
            ${{ steps.create_package.outputs.package_name }}
          retention-days: 30

      - name: Deployment Summary
        run: |
          echo "🎉 Deployment completed successfully!"
          echo ""
          echo "📋 Deployment Summary:"
          echo "Function Name: ${{ env.FUNCTION_NAME }}"
          echo "Environment: ${{ env.LAMBDA_NAME }}"
          echo "Runtime: ${{ env.LAMBDA_RUNTIME }}"
          echo "Memory: ${{ env.LAMBDA_MEMORY }}MB"
          echo "Timeout: ${{ env.LAMBDA_TIMEOUT }}s"
          echo "Quarterly Schedule: ${{ steps.create_schedule.outputs.schedule_name }}"
          echo ""
          echo "🔗 Next Steps:"
          echo "1. Verify SNS topic ARN is correct"
          echo "2. Test function manually: aws lambda invoke --function-name ${{ env.FUNCTION_NAME }}"
          echo "3. Check CloudWatch logs for execution results"
          echo "4. Enable monthly schedule if needed"
          echo ""
          echo "📊 CloudWatch Logs: /aws/lambda/${{ env.FUNCTION_NAME }}"

      - name: Cleanup
        if: always()
        run: |
          echo "🧹 Cleaning up temporary files..."
          rm -f ${{ steps.create_package.outputs.package_name }}
          rm -f test-event.json response.json
          rm -rf lambda-package/
