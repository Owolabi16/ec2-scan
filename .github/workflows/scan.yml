name: Deploy AWS Inspector Lambda Function.

on:
  push:
    branches: [main]
  
  workflow_dispatch:

env:
  AWS_REGION: eu-west-2
  LAMBDA_NAME: lambda-deployment
  LAMBDA_RUNTIME: python3.12
  LAMBDA_TIMEOUT: 300  # 5 minutes
  LAMBDA_MEMORY: 256   # MB
  FUNCTION_NAME: inspector-ec2-scanner

jobs:
  deploy-lambda:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    permissions:
      id-token: write
      contents: read
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_OIDC }}
          role-session-name: LambdaDeploymentSession
          aws-region: ${{ env.AWS_REGION }}

      - name: Create Lambda Deployment Package
        id: create_package
        run: |
          echo "📦 Creating Lambda deployment package..."

          # Set package name
          PACKAGE_NAME="lambda-deployment.zip"
          
          # Create deployment directory
          mkdir -p lambda-package
          
          # Create the Python script inline
          cat > lambda-package/lambda_function.py << 'EOF'
          import json, boto3, os
          from datetime import datetime, timezone

          SNS_TOPIC_ARN = os.environ["SNS_TOPIC_ARN"]
          SCAN_TYPE = os.environ.get("SCAN_TYPE", "PACKAGE_VULNERABILITY")
          ENVIRONMENT_FILTER = os.environ.get("ENVIRONMENT_FILTER", "")

          sns = boto3.client("sns")
          ec2 = boto3.client("ec2")
          inspector2 = boto3.client("inspector2")

          def _get_ec2_name_map(instance_ids):
              """
              Returns a dict mapping instance-id → Name-tag (or 'Unnamed Instance').
              """
              if not instance_ids:
                  return {}

              resp = ec2.describe_instances(InstanceIds=instance_ids)
              name_map = {}

              for reservation in resp.get("Reservations", []):
                  for instance in reservation.get("Instances", []):
                      iid  = instance["InstanceId"]
                      tags = instance.get("Tags", [])
                      name = next((t["Value"] for t in tags if t["Key"] == "Name"), None)
                      name_map[iid] = name or "Unnamed Instance"

              return name_map

          def _discover_running_instances():
              """Get all running EC2 instances, optionally filtered by environment."""
              filters = [{"Name": "instance-state-name", "Values": ["running"]}]
              
              if ENVIRONMENT_FILTER:
                  filters.append({"Name": "tag:Environment", "Values": [ENVIRONMENT_FILTER]})
              
              resp = ec2.describe_instances(Filters=filters)
              
              instances = []
              for reservation in resp.get("Reservations", []):
                  for instance in reservation.get("Instances", []):
                      instances.append(instance["InstanceId"])
              
              print(f"📋 Found {len(instances)} running instances")
              return instances

          def _create_inspector_scan(instance_ids):
              """Create and start Inspector scan for given instances."""
              scan_name = f"ec2-scan-{datetime.now(timezone.utc).strftime('%Y%m%d-%H%M')}"
              
              response = inspector2.create_scan(
                  scanName=scan_name,
                  scanType=SCAN_TYPE,
                  resources={"resourceIds": instance_ids}
              )
              
              scan_id = response["scanId"]
              print(f"✅ Created scan: {scan_id}")
              return scan_id, scan_name

          def _send_scan_notification(scan_id, scan_name, instance_ids):
              """Send SNS notification about scan initiation."""
              name_map = _get_ec2_name_map(instance_ids)
              instance_list = [f"{name_map[iid]}: {iid}" for iid in instance_ids]
              
              message = f"""AWS Inspector V2 scan initiated.

          Scan: {scan_name}
          ID: {scan_id}
          Type: {SCAN_TYPE}
          Instances: {len(instance_ids)}

          {chr(10).join(instance_list)}

          Status available in AWS Console."""
              
              sns.publish(
                  TopicArn=SNS_TOPIC_ARN,
                  Subject=f"Inspector Scan Started - {scan_name}",
                  Message=message
              )
              print("✅ Notification sent")    

          def lambda_handler(event, context):
              """
              Triggered by EventBridge scheduled events or manual invocation.
              Scans EC2 instances using AWS Inspector V2 and sends SNS notification.
              """
              print("▶︎ Received event:", json.dumps(event))

              try:
                  # 1. Discover EC2 instances
                  ec2_ids = _discover_running_instances()
                  if not ec2_ids:
                      print("ℹ︎ No EC2 instances found")
                      return {"statusCode": 204, "body": "No instances to scan"}

                  # 2. Create Inspector scan
                  scan_id, scan_name = _create_inspector_scan(ec2_ids)
                  
                  # 3. Send notification
                  _send_scan_notification(scan_id, scan_name, ec2_ids)
                  
                  print("✅ Scan initiated successfully")
                  return {"statusCode": 200, "body": f"Scan started: {scan_id}"}
                  
              except Exception as e:
                  print(f"❌ Error: {str(e)}")
                  return {"statusCode": 500, "body": f"Failed: {str(e)}"}
          EOF
          
          # Create ZIP package
          cd lambda-package
          zip -r ../$PACKAGE_NAME .
          cd ..
          
          echo "✅ Package created: $PACKAGE_NAME"

          echo "package_name=$PACKAGE_NAME" >> $GITHUB_OUTPUT

      - name: Deploy Lambda Function
        run: |
          FUNCTION_NAME="inspector-ec2-scanner"
          PACKAGE_NAME="${{ steps.create_package.outputs.package_name }}"
          
          echo "🚀 Deploying Lambda function..."
          
          if aws lambda get-function --function-name $FUNCTION_NAME 2>/dev/null; then
            echo "🔄 Updating existing function..."
            
            aws lambda update-function-code \
              --function-name $FUNCTION_NAME \
              --zip-file fileb://$PACKAGE_NAME
            
            aws lambda update-function-configuration \
              --function-name $FUNCTION_NAME \
              --runtime ${{ env.LAMBDA_RUNTIME }} \
              --timeout ${{ env.LAMBDA_TIMEOUT }} \
              --memory-size ${{ env.LAMBDA_MEMORY }} \
              --environment Variables="{SNS_TOPIC_ARN=${{ secrets.SNS_TOPIC_ARN }},SCAN_TYPE=PACKAGE_VULNERABILITY,ENVIRONMENT_FILTER=staging}"
            
            echo "✅ Function updated"
          else
            echo "🆕 Creating new function..."
            
            aws lambda create-function \
              --function-name $FUNCTION_NAME \
              --runtime ${{ env.LAMBDA_RUNTIME }} \
              --role ${{ secrets.LAMBDA_EXECUTION_ROLE_ARN }} \
              --handler lambda_function.lambda_handler \
              --zip-file fileb://$PACKAGE_NAME \
              --timeout ${{ env.LAMBDA_TIMEOUT }} \
              --memory-size ${{ env.LAMBDA_MEMORY }} \
              --environment Variables="{SNS_TOPIC_ARN=${{ secrets.SNS_TOPIC_ARN }},SCAN_TYPE=PACKAGE_VULNERABILITY,ENVIRONMENT_FILTER=staging}" \
              --description "AWS Inspector V2 EC2 Scanner - staging"
            
            echo "✅ Function created"
          fi

      - name: Create EventBridge Schedule (Quarterly - Auto)
        id: create_schedule
        run: |
          SCHEDULE_NAME="inspector-scan-quarterly"
          FUNCTION_NAME="inspector-ec2-scanner"
          
          echo "📅 Setting up quarterly EventBridge schedule..."
          
          # Check if rule already exists
          if aws events describe-rule --name $SCHEDULE_NAME 2>/dev/null; then
            echo "ℹ︎ Quarterly schedule already exists: $SCHEDULE_NAME"
          else
            echo "🆕 Creating quarterly schedule (auto-enabled)..."
            
            # Get Lambda function ARN
            LAMBDA_ARN=$(aws lambda get-function --function-name $FUNCTION_NAME --query 'Configuration.FunctionArn' --output text)
            
            # Create schedule (quarterly: January, April, July, October at 2 AM UTC)
            aws events put-rule \
              --name $SCHEDULE_NAME \
              --schedule-expression "cron(0 2 1 1,4,7,10 ? *)" \
              --description "Quarterly AWS Inspector EC2 scan - staging (AUTO)" \
              --state ENABLED
            
            # Add Lambda target
            aws events put-targets \
              --rule $SCHEDULE_NAME \
              --targets "Id"="1","Arn"="$LAMBDA_ARN"
            
            # Add Lambda permission for EventBridge
            aws lambda add-permission \
              --function-name $FUNCTION_NAME \
              --statement-id allow-eventbridge-quarterly \
              --action lambda:InvokeFunction \
              --principal events.amazonaws.com \
              --source-arn "arn:aws:events:${{ env.AWS_REGION }}:$(aws sts get-caller-identity --query Account --output text):rule/$SCHEDULE_NAME" \
              2>/dev/null || echo "Permission already exists"
            
            echo "✅ Quarterly schedule created (ENABLED): $SCHEDULE_NAME"
          fi
          
          echo "schedule_name=$SCHEDULE_NAME" >> $GITHUB_OUTPUT

      - name: Test Lambda Function
        id: test_function
        run: |
          echo "🧪 Testing Lambda function..."
          
          # Create test event
          cat > test-event.json << 'EOF'
          {
            "source": "test",
            "detail-type": "Manual Test",
            "detail": {}
          }
          EOF
          
          # Invoke function (async to avoid timeout)
          aws lambda invoke \
            --function-name inspector-ec2-scanner \
            --invocation-type Event \
            --payload file://test-event.json \
            response.json
          
          echo "✅ Test invocation sent (async)"
          echo "Check CloudWatch logs for results"

      - name: Upload Deployment Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.LAMBDA_NAME }}
          path: |
            ${{ steps.create_package.outputs.package_name }}
          retention-days: 30

      - name: Deployment Summary
        run: |
          echo "🎉 Deployment completed successfully!"
          echo ""
          echo "📋 Deployment Summary:"
          echo "Function Name: ${{ env.FUNCTION_NAME }}"
          echo "Environment: ${{ env.LAMBDA_NAME }}"
          echo "Runtime: ${{ env.LAMBDA_RUNTIME }}"
          echo "Memory: ${{ env.LAMBDA_MEMORY }}MB"
          echo "Timeout: ${{ env.LAMBDA_TIMEOUT }}s"
          echo "Quarterly Schedule: ${{ steps.create_schedule.outputs.schedule_name }}"
          echo ""
          echo "🔗 Next Steps:"
          echo "1. Verify SNS topic ARN is correct"
          echo "2. Test function manually: aws lambda invoke --function-name ${{ env.FUNCTION_NAME }}"
          echo "3. Check CloudWatch logs for execution results"
          echo "4. Enable monthly schedule if needed"
          echo ""
          echo "📊 CloudWatch Logs: /aws/lambda/${{ env.FUNCTION_NAME }}"

      - name: Cleanup
        if: always()
        run: |
          echo "🧹 Cleaning up temporary files..."
          rm -f ${{ steps.create_package.outputs.package_name }}
          rm -f test-event.json response.json
          rm -rf lambda-package/
