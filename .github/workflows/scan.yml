name: AWS Inspector EC2 Scheduled Scan

on:
  # Scheduled trigger - runs monthly (change to quarterly as needed)
  schedule:
    # Run on the 1st of every month at 2 AM UTC
    - cron: '0 2 1 * *'
    # For quarterly: uncomment below and comment above
    # - cron: '0 2 1 1,4,7,10 *'  # January, April, July, October
  
  # Manual trigger for testing
  workflow_dispatch:
    inputs:
      scan_type:
        description: 'Type of scan to perform'
        required: true
        default: 'PACKAGE_VULNERABILITY'
        type: choice
        options:
          - 'PACKAGE_VULNERABILITY'
          - 'NETWORK_REACHABILITY'
      target_instances:
        description: 'Specific instance IDs to scan (comma-separated, leave empty for all)'
        required: false
        type: string
      environment_filter:
        description: 'Filter instances by environment tag'
        required: false
        type: string
        default: 'all'

env:
  AWS_REGION: eu-west-2
  SCAN_TYPE: ${{ github.event.inputs.scan_type || 'PACKAGE_VULNERABILITY' }}

jobs:
  inspector-ec2-scan:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    permissions:
      id-token: write
      contents: read
    
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.aws-github-oidc-iam-role }}
          role-session-name: InspectorEC2ScanSession
          aws-region: ${{ env.AWS_REGION }}

      - name: Discover EC2 Instances
        id: discover_instances
        run: |
          echo "🔍 Discovering EC2 instances..."
          
          # Build filter based on inputs
          FILTER_QUERY="Name=instance-state-name,Values=running"
          
          if [ "${{ github.event.inputs.environment_filter }}" != "all" ] && [ "${{ github.event.inputs.environment_filter }}" != "" ]; then
            FILTER_QUERY="$FILTER_QUERY Name=tag:Environment,Values=${{ github.event.inputs.environment_filter }}"
          fi
          
          # Get instances
          if [ "${{ github.event.inputs.target_instances }}" != "" ]; then
            # Specific instances provided
            INSTANCE_IDS="${{ github.event.inputs.target_instances }}"
            echo "🎯 Scanning specific instances: $INSTANCE_IDS"
          else
            # Discover all running instances
            INSTANCE_IDS=$(aws ec2 describe-instances \
              --filters $FILTER_QUERY \
              --query 'Reservations[].Instances[].InstanceId' \
              --output text | tr '\t' ',')
          fi
          
          if [ -z "$INSTANCE_IDS" ]; then
            echo "❌ No instances found matching criteria"
            exit 1
          fi
          
          echo "📋 Found instances: $INSTANCE_IDS"
          echo "instance_ids=$INSTANCE_IDS" >> $GITHUB_OUTPUT
          
          # Get instance details for reporting
          aws ec2 describe-instances \
            --instance-ids $(echo $INSTANCE_IDS | tr ',' ' ') \
            --query 'Reservations[].Instances[].[InstanceId,InstanceType,State.Name,Tags[?Key==`Name`].Value|[0],Tags[?Key==`Environment`].Value|[0]]' \
            --output table > instance_details.txt
          
          echo "📊 Instance Details:"
          cat instance_details.txt

      - name: Check Inspector Coverage
        id: check_coverage
        run: |
          echo "🔍 Checking AWS Inspector coverage..."
          
          IFS=',' read -ra INSTANCE_ARRAY <<< "${{ steps.discover_instances.outputs.instance_ids }}"
          
          COVERED_INSTANCES=""
          UNCOVERED_INSTANCES=""
          
          for instance in "${INSTANCE_ARRAY[@]}"; do
            # Check if instance is covered by Inspector
            COVERAGE=$(aws inspector2 describe-coverage \
              --filter-criteria resourceId="$instance" \
              --query 'coveredResources[0].scanStatus.statusCode' \
              --output text 2>/dev/null || echo "NOT_FOUND")
            
            if [ "$COVERAGE" != "NOT_FOUND" ] && [ "$COVERAGE" != "None" ]; then
              COVERED_INSTANCES="$COVERED_INSTANCES,$instance"
              echo "✅ $instance is covered (Status: $COVERAGE)"
            else
              UNCOVERED_INSTANCES="$UNCOVERED_INSTANCES,$instance"
              echo "❌ $instance is not covered"
            fi
          done
          
          # Remove leading comma
          COVERED_INSTANCES=$(echo $COVERED_INSTANCES | sed 's/^,//')
          UNCOVERED_INSTANCES=$(echo $UNCOVERED_INSTANCES | sed 's/^,//')
          
          echo "covered_instances=$COVERED_INSTANCES" >> $GITHUB_OUTPUT
          echo "uncovered_instances=$UNCOVERED_INSTANCES" >> $GITHUB_OUTPUT
          
          if [ -n "$UNCOVERED_INSTANCES" ]; then
            echo "⚠️  Warning: Some instances are not covered by Inspector"
          fi

      - name: Trigger Inspector Scan
        id: trigger_scan
        run: |
          echo "🚀 Triggering AWS Inspector scan..."
          
          SCAN_NAME="ec2-scheduled-scan-$(date +%Y%m%d-%H%M%S)"
          
          # Create scan request
          SCAN_RESPONSE=$(aws inspector2 create-scan \
            --scan-name "$SCAN_NAME" \
            --scan-type "${{ env.SCAN_TYPE }}" \
            --resources resourceIds="${{ steps.discover_instances.outputs.instance_ids }}" \
            --output json)
          
          SCAN_ID=$(echo $SCAN_RESPONSE | jq -r '.scanId')
          
          if [ "$SCAN_ID" = "null" ] || [ -z "$SCAN_ID" ]; then
            echo "❌ Failed to create scan"
            echo "Response: $SCAN_RESPONSE"
            exit 1
          fi
          
          echo "✅ Scan created successfully"
          echo "📋 Scan ID: $SCAN_ID"
          echo "📋 Scan Name: $SCAN_NAME"
          echo "📋 Scan Type: ${{ env.SCAN_TYPE }}"
          
          echo "scan_id=$SCAN_ID" >> $GITHUB_OUTPUT
          echo "scan_name=$SCAN_NAME" >> $GITHUB_OUTPUT

      - name: Monitor Scan Progress
        id: monitor_scan
        run: |
          echo "⏳ Monitoring scan progress..."
          
          SCAN_ID="${{ steps.trigger_scan.outputs.scan_id }}"
          MAX_ATTEMPTS=60  # 30 minutes with 30-second intervals
          ATTEMPT=0
          
          while [ $ATTEMPT -lt $MAX_ATTEMPTS ]; do
            SCAN_STATUS=$(aws inspector2 describe-scans \
              --scan-ids "$SCAN_ID" \
              --query 'scans[0].scanStatus.statusCode' \
              --output text)
            
            echo "📊 Scan Status: $SCAN_STATUS (Attempt $((ATTEMPT + 1))/$MAX_ATTEMPTS)"
            
            case $SCAN_STATUS in
              "COMPLETED")
                echo "✅ Scan completed successfully"
                break
                ;;
              "FAILED")
                echo "❌ Scan failed"
                exit 1
                ;;
              "CANCELLED")
                echo "⚠️  Scan was cancelled"
                exit 1
                ;;
              "IN_PROGRESS"|"PENDING")
                echo "⏳ Scan in progress, waiting..."
                sleep 30
                ;;
              *)
                echo "❓ Unknown status: $SCAN_STATUS"
                ;;
            esac
            
            ATTEMPT=$((ATTEMPT + 1))
          done
          
          if [ $ATTEMPT -eq $MAX_ATTEMPTS ]; then
            echo "⏰ Scan monitoring timed out"
            exit 1
          fi

      - name: Retrieve Scan Results
        id: get_results
        run: |
          echo "📥 Retrieving scan results..."
          
          SCAN_ID="${{ steps.trigger_scan.outputs.scan_id }}"
          TIMESTAMP=$(date +%Y%m%d-%H%M%S)
          
          # Get scan results
          aws inspector2 get-scan-results \
            --scan-id "$SCAN_ID" \
            --output json > scan_results_${TIMESTAMP}.json
          
          # Get findings count
          FINDINGS_COUNT=$(aws inspector2 list-findings \
            --filter-criteria scanId="$SCAN_ID" \
            --query 'length(findings)' \
            --output text)
          
          echo "📊 Total findings: $FINDINGS_COUNT"
          echo "findings_count=$FINDINGS_COUNT" >> $GITHUB_OUTPUT
          echo "results_file=scan_results_${TIMESTAMP}.json" >> $GITHUB_OUTPUT
          
          # Get severity breakdown
          echo "📊 Severity Breakdown:"
          aws inspector2 list-findings \
            --filter-criteria scanId="$SCAN_ID" \
            --query 'findings[].{Severity:severity,Title:title}' \
            --output table > severity_breakdown.txt
          
          cat severity_breakdown.txt

      - name: Generate Detailed Report
        id: generate_report
        run: |
          echo "📋 Generating detailed scan report..."
          
          TIMESTAMP=$(date +%Y%m%d-%H%M%S)
          REPORT_FILE="inspector_scan_report_${TIMESTAMP}.json"
          
          # Create comprehensive report
          cat > $REPORT_FILE << EOF
          {
            "scan_metadata": {
              "scan_id": "${{ steps.trigger_scan.outputs.scan_id }}",
              "scan_name": "${{ steps.trigger_scan.outputs.scan_name }}",
              "scan_type": "${{ env.SCAN_TYPE }}",
              "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
              "workflow_run_id": "${{ github.run_id }}",
              "triggered_by": "${{ github.event_name }}"
            },
            "instance_summary": {
              "total_instances": "$(echo "${{ steps.discover_instances.outputs.instance_ids }}" | tr ',' '\n' | wc -l)",
              "scanned_instances": "${{ steps.discover_instances.outputs.instance_ids }}",
              "covered_instances": "${{ steps.check_coverage.outputs.covered_instances }}",
              "uncovered_instances": "${{ steps.check_coverage.outputs.uncovered_instances }}"
            },
            "findings_summary": {
              "total_findings": "${{ steps.get_results.outputs.findings_count }}"
            }
          }
          EOF
          
          # Append detailed findings
          echo "," >> $REPORT_FILE
          echo '"detailed_findings":' >> $REPORT_FILE
          aws inspector2 list-findings \
            --filter-criteria scanId="${{ steps.trigger_scan.outputs.scan_id }}" \
            --output json >> $REPORT_FILE
          echo "}" >> $REPORT_FILE
          
          echo "report_file=$REPORT_FILE" >> $GITHUB_OUTPUT
          echo "✅ Report generated: $REPORT_FILE"

      - name: Upload Scan Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: inspector-scan-results-${{ github.run_id }}
          path: |
            scan_results_*.json
            inspector_scan_report_*.json
            instance_details.txt
            severity_breakdown.txt
          retention-days: 90

      - name: Send Results Notification
        if: always()
        run: |
          echo "📧 Preparing notification..."
          
          STATUS="SUCCESS"
          if [ "${{ job.status }}" != "success" ]; then
            STATUS="FAILED"
          fi
          
          FINDINGS_COUNT="${{ steps.get_results.outputs.findings_count || 'N/A' }}"
          INSTANCE_COUNT=$(echo "${{ steps.discover_instances.outputs.instance_ids }}" | tr ',' '\n' | wc -l)
          
          echo "📋 Scan Summary:"
          echo "Status: $STATUS"
          echo "Instances Scanned: $INSTANCE_COUNT"
          echo "Findings: $FINDINGS_COUNT"
          echo "Scan ID: ${{ steps.trigger_scan.outputs.scan_id }}"
          echo "Report: ${{ steps.generate_report.outputs.report_file }}"
          
          # Here you could add Slack notification or SNS publishing
          # Example for future Slack integration:
          # curl -X POST -H 'Content-type: application/json' \
          #   --data '{"text":"AWS Inspector EC2 Scan Complete\nStatus: '$STATUS'\nFindings: '$FINDINGS_COUNT'"}' \
          #   ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Cleanup Old Scans
        if: always()
        run: |
          echo "🧹 Cleaning up old scan data..."
          
          # List scans older than 90 days
          CUTOFF_DATE=$(date -d '90 days ago' +%Y-%m-%d)
          
          OLD_SCANS=$(aws inspector2 list-scans \
            --query "scans[?createdAt<'${CUTOFF_DATE}'].scanId" \
            --output text)
          
          if [ -n "$OLD_SCANS" ] && [ "$OLD_SCANS" != "None" ]; then
            echo "🗑️  Found old scans to cleanup: $OLD_SCANS"
            # Note: Add actual cleanup logic here if Inspector supports scan deletion
          else
            echo "✅ No old scans found for cleanup"
          fi
